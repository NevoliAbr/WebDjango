name: Django CI & Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # --- JOB 1: TEST MATRIX ---
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      # (Opcional) Úsalo solo si Pillow te pidiera compilar con libs del sistema
      # - name: System deps for Pillow
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libjpeg-dev zlib1g-dev

      - name: Install dependencies (incluye Pillow)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt Pillow

      - name: Django checks & tests
        env:
          # Ajusta si tu settings espera variables (DB, SECRET_KEY de pruebas, etc.)
          DJANGO_SETTINGS_MODULE: config.settings  # <-- cambia a tu módulo de settings
        run: |
          python manage.py check
          python manage.py test

  # --- JOB 2: DEPLOY A HEROKU (solo cuando test pasa y es push a main) ---
  deploy:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies for build (incluye Pillow y gunicorn)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt Pillow gunicorn

      # Nota: El despliegue real lo hará Heroku desde el repo (buildpacks).
      # Este action hace push a Heroku y dispara el build y release en Heroku.
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          # Si usas subcarpeta para la app Django, especifica aquí:
          # appdir: "ruta/subcarpeta"
          usedocker: false

      # (Opcional pero útil) Ejecuta migraciones y collectstatic en Heroku
      - name: Run migrations on Heroku
        run: |
          curl -n -X POST https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/dynos \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.heroku+json; version=3" \
          -H "Authorization: Bearer ${{ secrets.HEROKU_API_KEY }}" \
          -d '{"command":"python manage.py migrate --noinput","type":"run"}'

      - name: Collect static on Heroku
        run: |
          curl -n -X POST https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/dynos \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.heroku+json; version=3" \
          -H "Authorization: Bearer ${{ secrets.HEROKU_API_KEY }}" \
          -d '{"command":"python manage.py collectstatic --noinput","type":"run"}'
